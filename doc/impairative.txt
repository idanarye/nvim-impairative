==============================================================================
Impairative - Pairs of complementing keybinds                      *impairative*

ImpairativeSetupArgs                                      *ImpairativeSetupArgs*

    Fields: ~
        {enable?}                (string)                             Leader keys for turning settings on in `toggling` keymaps
        {disable?}               (string)                             Leader keys for turning settings off in `toggling` keymaps
        {toggle?}                (string)                             Leader keys for toggling settings in `toggling` keymaps
        {toggling?}              (fun(helper:ImpairativeToggling))    Define mappings with the supplied |ImpairativeToggling|
        {backward?}              (string)                             Leader keys for turning the operation backward in `operations` keymaps
        {forward?}               (string)                             Leader keys for running the operation forward in `operations` keymaps
        {operations?}            (fun(helper:ImpairativeOperations))  Define mappings with the supplied |ImpairativeOperations|
        {replicate_unimpaired?}  (boolean)                            Create (almost) the same mappings vim-unimpaired creates


M.setup({args})                                              *impairative.setup*
    Configure keymaps

    Completly optional - the helper objects can be created and used directly.

    Parameters: ~
        {args}  (ImpairativeSetupArgs)  See |ImpairativeSetupArgs|


M.toggling({opts})                                        *impairative.toggling*
    Create an |ImpairativeToggling| helper to define mappings with

    Parameters: ~
        {opts}  (ImpairativeTogglingOptions)  See |ImpairativeTogglingOptions|

    Returns: ~
        (ImpairativeToggling)


M.operations({opts})                                    *impairative.operations*
    Create an |ImpairativeOperations| helper to define mappings with

    Parameters: ~
        {opts}  (ImpairativeOperationsOptions)  See |ImpairativeOperationsOptions|

    Returns: ~
        (ImpairativeOperations)


ImpairativeTogglingOptions                          *ImpairativeTogglingOptions*

    Fields: ~
        {enable}   (string)  Leader keys for turning settings on
        {disable}  (string)  Leader keys for turning settings off
        {toggle}   (string)  Leader keys for toggling settings


ImpairativeToggling                                        *ImpairativeToggling*

    Fields: ~
        {_opts}  (ImpairativeTogglingOptions)


ImpairativeTogglingManualArgs                    *ImpairativeTogglingManualArgs*

    Fields: ~
        {key}      (string)        The key for the mapping (will be prefixed by one of the leaders)
        {name?}    (string)        A name for generating mapping descriptions
        {enable}   (string|fun())  Command or function for the enable mapping
        {disable}  (string|fun())  Command or function for the disable mapping
        {toggle}   (string|fun())  Command or function for the toggle mapping


ImpairativeToggling:manual({args})                  *ImpairativeToggling:manual*
    Bind toggling mappings by directly specifying the commands for each mapping.

    Parameters: ~
        {args}  (ImpairativeTogglingManualArgs)  See |ImpairativeTogglingManualArgs|


ImpairativeTogglingGetterSetterArgs        *ImpairativeTogglingGetterSetterArgs*

    Fields: ~
        {key}    (string)              The key for the mapping (will be prefixed by one of the leaders)
        {name?}  (string)              A name for generating mapping descriptions
        {get}    (fun():boolean)       Checks if the toggleable thing is on or off
        {set}    (fun(value:boolean))  Sets the value of the toggleable thing


                                             *ImpairativeToggling:getter_setter*
ImpairativeToggling:getter_setter({args})
    Bind toggling mappings by directly specifying a getter and a setter.

    Parameters: ~
        {args}  (ImpairativeTogglingGetterSetterArgs)  See |ImpairativeTogglingGetterSetterArgs|

    Returns: ~
        (ImpairativeToggling)


ImpairativeTogglingFieldArgs                      *ImpairativeTogglingFieldArgs*

    Fields: ~
        {key}      (string)         The key for the mapping (will be prefixed by one of the leaders)
        {name?}    (string)         A name for generating mapping descriptions
        {table}    (table)          The Lua table that contains the field to toggle
        {field}    (any)            The name of the field in the Lua table
        {values?}  ({boolean:any})  Use when the field is not not using boolean (e.g. `{[true] = 'on', [false] = 'off'}`)


ImpairativeToggling:field({args})                    *ImpairativeToggling:field*
    Bind toggling mappings for a field in a Lua table.

    Can also be used for things that use metatables like |lua-vim-variables|,
    but if that table is |vim.o| prefer using |ImpairativeToggling:option|
    instead.

    Parameters: ~
        {args}  (ImpairativeTogglingFieldArgs)  See |ImpairativeTogglingFieldArgs|

    Returns: ~
        (ImpairativeToggling)


ImpairativeTogglingOptionArgs                    *ImpairativeTogglingOptionArgs*

    Fields: ~
        {key}      (string)         The key for the mapping (will be prefixed by one of the leaders)
        {option}   (string)         The name of the Neovim option
        {values?}  ({boolean:any})  Use when the field is not not using boolean (e.g. `{[true] = 'on', [false] = 'off'}`)


ImpairativeToggling:option({args})                  *ImpairativeToggling:option*
    Bind toggling mappings for a Neovim option using |vim.o|.

    Parameters: ~
        {args}  (ImpairativeTogglingOptionArgs)  See |ImpairativeTogglingOptionArgs|

    Returns: ~
        (ImpairativeToggling)


ImpairativeOperationsOptions                      *ImpairativeOperationsOptions*

    Fields: ~
        {backward}  (string)  Leader keys for turning the operation backward
        {forward}   (string)  Leader keys for running the operation forward


ImpairativeOperations                                    *ImpairativeOperations*

    Fields: ~
        {_opts}  (ImpairativeOperationsOptions)


ImpairativeDesc                                                *ImpairativeDesc*
    Used to generate descriptions for the keymaps.

    There are two ways to specify the description:
    * A table with the backward and forward descriptions:
      `{ backward = 'move backward', forward = 'move forward' }`
    * Template string:
      `'move {backward|forward}'`

    Type: ~
        string|{backward:string,forward:string}


ImpairativeOperationsFunctionPairArgs    *ImpairativeOperationsFunctionPairArgs*

    Fields: ~
        {key}        (string)           The key for the mapping (will be prefixed by one of the leaders)
        {desc?}      (ImpairativeDesc)  see |ImpairativeDesc|
        {better_n?}  (boolean)          Whether to integrate with better-n
        {backward}   (fun())            The "backward" operation
        {forward}    (fun())            The "forward" operation


                                           *ImpairativeOperations:function_pair*
ImpairativeOperations:function_pair({args})
    Bind operation mappings by directly specifying the commands for each direction.

    If the operations are |cmdline| commands, prefer
    |ImpairativeOperations:command_pair| which also handles |count|.

    Parameters: ~
        {args}  (ImpairativeOperationsFunctionPairArgs)  See |ImpairativeOperationsFunctionPairArgs|

    Returns: ~
        (ImpairativeOperations)


ImpairativeOperationsUnifiedFunctionArgs*ImpairativeOperationsUnifiedFunctionArgs*

    Fields: ~
        {key}        (string)                               The key for the mapping (will be prefixed by one of the leaders)
        {desc?}      (ImpairativeDesc)                      see |ImpairativeDesc|
        {better_n?}  (boolean)                              Whether to integrate with better-n
        {fun}        (fun(direction:"backward"|"forward"))  The operation


                                        *ImpairativeOperations:unified_function*
ImpairativeOperations:unified_function({args})
    Bind operation mappings using a function that receives the direction as a parameter.

    Parameters: ~
        {args}  (ImpairativeOperationsUnifiedFunctionArgs)  See |ImpairativeOperationsUnifiedFunctionArgs|

    Returns: ~
        (ImpairativeOperations)


ImpairativeOperationsJumpInBufArgs          *ImpairativeOperationsJumpInBufArgs*

    Fields: ~
        {key}        (string)                              The key for the mapping (will be prefixed by one of the leaders)
        {desc?}      (ImpairativeDesc)                     see |ImpairativeDesc|
        {extreme?}   ({key:string,desc?:ImpairativeDesc})  Also generate mapping to jump to first and last targets
        {better_n?}  (boolean)                             Whether to integrate with better-n
        {fun}        (fun():Iter)                          Should return a |vim.iter| with all the jump targets in the buffer


                                             *ImpairativeOperations:jump_in_buf*
ImpairativeOperations:jump_in_buf({args})
    Bind operation mappings for jump targets in the current buffer.

    The `fun` argument must return a |vim.iter| which yields tables with four
    integer fields - `start_line`, `start_col`, `end_line` and `end_col` - where
    lines are 1-based and columns are 0-based.

    These keymaps can also be used in |Operator-pending-mode|.

    Parameters: ~
        {args}  (ImpairativeOperationsJumpInBufArgs)  See |ImpairativeOperationsJumpInBufArgs|

    Returns: ~
        (ImpairativeOperations)


ImpairativeOperationsCommandPairArgs      *ImpairativeOperationsCommandPairArgs*

    Fields: ~
        {key}        (string)   The key for the mapping (will be prefixed by one of the leaders)
        {better_n?}  (boolean)  Whether to integrate with better-n
        {backward}   (string)   The "backward" command
        {forward}    (string)   The "forward" command


                                            *ImpairativeOperations:command_pair*
ImpairativeOperations:command_pair({args})
    Bind operation mappings by directly specifying the |cmdline| commands for each direction.

    Unlike |ImpairativeOperations:function_pair|, which uses functions, this
    helper method:
    * Automatically generates descriptions based on the commands.
    * Automatically passes the |count| when the mapping is activated with one.

    Parameters: ~
        {args}  (ImpairativeOperationsCommandPairArgs)  See |ImpairativeOperationsCommandPairArgs|

    Returns: ~
        (ImpairativeOperations)


ImpairativeRangeOp                                          *ImpairativeRangeOp*
    Parameters for function that runs the operator in |ImpairativeOperations:range_manipulation|.

    Fields: ~
        {direction}   ("backward"|"forward")   The direction of the operator that was invoked
        {count}       (integer)                The |v:count| the operator was invoked with
        {count1}      (integer)                The |v:count1| the operator was invoked with
        {range_type}  ("line"|"char"|"block")  The range of the motion
        {start_line}  (integer)                The 1-based line where the motion's selection starts
        {end_line}    (integer)                The 1-based line where the motion's selection ends
        {start_col}   (integer)                The 1-based column where the motion's selection starts
        {end_col}     (integer)                The 1-based column where the motion's selection ends


                                     *ImpairativeOperationRangeManipulationArgs*
ImpairativeOperationRangeManipulationArgs

    Fields: ~
        {key}        (string)                        The key for the mapping (will be prefixed by one of the leaders)
        {line_key?}  (string|boolean)                A "motion" for running the operator on the same line
        {desc?}      (ImpairativeDesc)               see |ImpairativeDesc|
        {fun}        (fun(args:ImpairativeRangeOp))  Performs the operation. See |ImpairativeRangeOp|


                                      *ImpairativeOperations:range_manipulation*
ImpairativeOperations:range_manipulation({args})
    Bind operation mappings that operates on a range in the buffer.

    The range works like a regular Neovim operator - either with a motion after
    the command or by running it from visual mode. Additionally, if `line_key`
    is provided, that key can be used to run the operator on the current line.
    If `line_key = true` then the key from the `key` argument will be used.

    Parameters: ~
        {args}  (ImpairativeOperationRangeManipulationArgs)  See |ImpairativeOperationRangeManipulationArgs|


                                     *ImpairativeOperationsTextManipulationArgs*
ImpairativeOperationsTextManipulationArgs

    Fields: ~
        {key}        (string)                   The key for the mapping (will be prefixed by one of the leaders)
        {line_key?}  (string|boolean)           A "motion" for running the operator on the same line
        {desc?}      (ImpairativeDesc)          see |ImpairativeDesc|
        {backward}   (fun(orig:string):string)  The "backword" text transform (typically encode)
        {forward}    (fun(orig:string):string)  The "forward" text transform (typically decode)


                                       *ImpairativeOperations:text_manipulation*
ImpairativeOperations:text_manipulation({args})
    Bind operation mappings that transform text in the buffer.

    Impairative uses the convention set by unimpaired where the backward
    direction is for encoding and the forward direction is for decoding. This
    convention, of course, cannot be enforced for user defined mappings - but it
    is encouraged.

    The text is selected like a regular Neovim operator - either with a motion
    after the command or by running it from visual mode. Additionally, if
    `line_key` is provided, that key can be used to run the operator on the
    current line. If `line_key = true` then the key from the `key` argument will
    be used.

    Parameters: ~
        {args}  (ImpairativeOperationsTextManipulationArgs)  See |ImpairativeOperationsTextManipulationArgs|

    Returns: ~
        (ImpairativeOperations)


vim:tw=78:ts=8:noet:ft=help:norl:
